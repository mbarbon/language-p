Parsing:
- 5.10/5.12 syntax
- check that right side of mixed-assign is a scalar
- stash access through hash syntax
- glob access through hash syntax
- global variables/symbols (STDOUT, punctuation)
- scoping (check if/while conditions, for loop headers, etc.)
- attributes
- formats
- indirect method calls
  - find more corner cases
- lexical pragmas/hints
  - strictures
  - warnings
- proper lexing of ${  id # comment\n } vs. ${ id # comment \n expr }
- more tests for ${foo[.......} crazy cases
- special treatment for glob() (calls CORE::GLOBAL::glob)
- override <> (glob), `` (backtick) and <> (readline) by overriding
  (CORE::GLOBAL::) glob, readpipe, readline
- fix parsing of do, glob and require when overridden without prototype
- simplify detection of <foo> vs. <foo >, avoid constructing a lexer
- quoted strings
  - \x{af}, when lexing quoted strings
  - Unicode handling
- regexp
  - char classes
    - euristic for $foo[...] (intuit_more)
  - other metacharacters
    - \p{}, \P{}, \X
  - magic variables
  - (?...) syntax and grouping
    - (?# - comment
    - (?{ - code
    - (??{ - code
    - (?( - condition
  - empty pattern
- vstrings and versions in 'use' and 'no'

IR:
- generate glob dereferences for open/binmode/pipe
- split 2-arg and 3-arg open to separate opcodes
- check that do BLOCK does not count as loop for loop-control
- add code generation for do {} while, do {} until 
- uniform representation for n-ary opcodes (pipe, chdir, ...)
  take into account variable argument count

Runtime:
- coerce values according to prototype (esp. \[...])
- integer -> float on overflow (also in parsing!)
- proper scalar polimorphing
  - mixed-mode arithmetic
- better handling of sub calls
  - encapsulate enter/leave
  - AUTOLOAD
- autovivification
- multiple dispatch operators
- array/list/hash assignment
  - optimize lists with common assignments
  - check mixed assignments
- garbage collection and/or reference counting
- do file/require/use/eval string
  - check module return value in require
  - handle %INC correctly on parse error
- stack unwinding
  - nonlocal redo/last/next/goto
- computed goto/next/last/redo
- local()
  - check code generation for all block types and
    different cases for local() in conditions or in loop/conditional/continue
    blocks
  - local() ends at end of file
  - localization of array, hash, glob, array/hash element
  - check that when localizing a variable, it is always
    a global/package variable
  - magical/tied variables (probably add a localize() method to all types)
  - localization of complex expressions (?:, lists, ...)
  - integrate in stack unwinding
- my()
  - check code generation for all block types and
    different cases for my() in conditions or in loop/conditional/continue
    blocks
  - my() at global scope does not end at end of file
  - code generation for return/die/last/redo/next, ...
  - test global my() vs. local my(), lexical arrays, hashes
  - integrate in stack unwinding
- objects
  - AUTOLOAD in method resolution
  - $foo->$bar( ... )
  - $foo->Bar::baz( ... )
  - $foo->SUPER::baz( ... )
  - magic ISA, method caching, pluggable MRO
- tie
- overload
  - all the available operators
  - implement inheritance
  - implement using a method as overload handler
  - implement mutators, copy operator
  - implement fallback
- for all runtime functions, define which take/return perl types and which
  are only overloads on top of the others
- pass a runtime instance into all methods
- symbolic references
- die without arguments, exception propagation, $SIG{__DIE__}
- hasargs, evaltext and is_require values in caller

Refactoring:
- check offsets for call sequence, refactor stack handling
- remove all globals from Toy code generator
- replace all strings with integer constants/flags
  - move information about bultins/overridables to a separate module
    (currently in both lexer and parse-tree)
- rewrite lexer to use /\G.../g instead of s///
  - assert unlexed tokens are relexed with the correct expectations
  - assert lex_string/lex unlex buffers do not intermingle
- make regexp parser a full blown parser, not the hack it is;
  maybe add a lexer subclass for parsing patterns
- detect builtins that could have an indirect object as first argument
  earlier in the parsing
- add structure to contain actions to be performed at block end,
  and can generate code for them
- make the top level of a file/string/... a new parse tree node
  (or a special type of block)